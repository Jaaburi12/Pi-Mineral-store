<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pi Network Mineral Store</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h1>Welcome to Pi Network Mineral Store</h1>
    <div id="product-list">
        <!-- Products will be dynamically loaded here -->
    </div>
    <script src="script.js"></script>
</body>
</html>

body {
    font-family: Arial, sans-serif;
    text-align: center;
    margin: 0;
    padding: 20px;
}

#product-list {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
}

.product {
    border: 1px solid #ddd;
    padding: 10px;
    margin: 10px;
    width: 200px;
    text-align: left;
}

document.addEventListener('DOMContentLoaded', () => {
    fetch('/api/products')
        .then(response => response.json())
        .then(products => {
            const productList = document.getElementById('product-list');
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = 'product';
                productDiv.innerHTML = `
                    <h3>${product.name}</h3>
                    <p>${product.description}</p>
                    <p>Price: ${product.price} Pi</p>
                    <button onclick="buyProduct('${product.id}')">Buy</button>
                `;
                productList.appendChild(productDiv);
            });
        });
});

function buyProduct(productId) {
    // Pi Network payment integration will go here
    alert('Pi Network payment integration is not implemented yet.');
}
const express = require('express');
const app = express();
const port = 3000;

let products = [
    { id: '1', name: 'Gold Nugget', description: 'A shiny gold nugget.', price: 10 },
    { id: '2', name: 'Silver Ore', description: 'A piece of silver ore.', price: 5 },
    // Add more products as needed
];

app.use(express.static('public'));

app.get('/api/products', (req, res) => {
    res.json(products);
});

app.post('/api/buy', (req, res) => {
    // Handle Pi Network payment processing here
    res.json({ success: true, message: 'Payment processed successfully' });
});

app.listen(port, () => {
    console.log(`Pi Network Mineral Store running at http://localhost:${port}`);
});

const Pi = require('pi-network'); // Hypothetical Pi Network SDK
const { User } = require('pi-network/models'); // Hypothetical models

const PiNetworkIntegration = {
    initialize: function() {
        Pi.initialize('your-api-key'); // Initialize with your Pi Network API key
    },
    
    createPayment: async function(product, user) {
        try {
            const payment = await Pi.createPayment({
                amount: product.price,
                memo: `Payment for ${product.name}`,
                user: user.id, // Hypothetical user object
            });
            return payment;
        } catch (error) {
            console.error('Payment creation failed', error);
            throw error;
        }
    },
};

module.exports = PiNetworkIntegration;

const express = require('express');
const PiNetworkIntegration = require('./pi-integration');
const app = express();
const port = 3000;

PiNetworkIntegration.initialize();

let products = [
    { id: '1', name: 'Gold Nugget', description: 'A shiny gold nugget.', price: 10 },
    { id: '2', name: 'Silver Ore', description: 'A piece of silver ore.', price: 5 },
    // Add more products as needed
];

app.use(express.static('public'));

app.get('/api/products', (req, res) => {
    res.json(products);
});
app.post('/api/buy', async (req, res) => {
    const { productId, userId } = req.body; // Assume the client sends product ID and user ID
    const product = products.find(p => p.id === productId);
    const user = await User.findById(userId); // Hypothetical user fetching

        if (!product || !user) {
        return res.status(400).json({ success: false, message: 'Invalid product or user' });
    }

    try {
        const payment = await PiNetworkIntegration.createPayment(product, user);
        res.json({ success: true, message: 'Payment processed successfully', payment });
    } catch (error) {
        res.status(500).json({ success: false, message: 'Payment processing failed' });
    }
});
app.listen(port, () => {
    console.log(`Pi Network Mineral Store running at http://localhost:${port}`);
});